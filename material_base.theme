<?php

/**
 * @file
 * Functions to support theming in the Material Base theme.
 */

use Drupal\Core\Template\Attribute;
use Drupal\Core\Form\FormStateInterface;
use Drupal\block_content\BlockContentInterface;
use Drupal\block\Entity\Block;

/**
 * Implements hook_preprocess_HOOK().
 */
function material_base_preprocess_html(&$variables) {

  // Add body class for front and not front pages.
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $variables['attributes']['class'][] = 'front';
  } else {
    $variables['attributes']['class'][] = 'not-front';
  }

  // Add page alias as body class.
  $current_path = \Drupal::service('path.current')->getPath();
  $current_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  $variables['attributes']['class'][] = 'page-' . \Drupal\Component\Utility\Html::cleanCssIdentifier(ltrim($current_alias, '/'));

  // Check for SVG sprite file.
  $icons = '';
  $icons_file = \Drupal::theme()->getActiveTheme()->getPath() . '/dist/images/icons.svg';

  if (file_exists($icons_file)) {
    // Get the contents of the SVG sprite.
    $icons = file_get_contents($icons_file);
  } else {
    // Use base theme SVG sprite file.
    $icons_file = drupal_get_path('theme', 'material_base') . '/dist/images/icons.svg';
    if (file_exists($icons_file)) {
      // Get the contents of the SVG sprite.
      $icons = file_get_contents($icons_file);
    }
  }

  if ($icons) {
    // Add SVG sprite to page_bottom.
    $variables['page_bottom']['icons'] = array(
      '#type' => 'inline_template',
      '#template' => '<span class="hidden">' . $icons . '</span>',
    );
  }
}

/**
 * Implements hook_preprocess_page().
 */
function material_base_preprocess_page(&$variables) {

  // Pass Navbar style setting path to template
  $variables['navbar_fixed'] = theme_get_setting('navbar_fixed');
  $variables['navbar_style'] = theme_get_setting('navbar_style');

}

/**
 * Implements hook_preprocess_region().
 */
function material_base_preprocess_region(array &$variables) {

  switch ($variables['region']) {
    case 'navbar':
      // Pass Navbar style setting path to template
      $variables['navbar_fixed'] = theme_get_setting('navbar_fixed');
      $variables['navbar_style'] = theme_get_setting('navbar_style');
      // Pass logo path to template.
      $variables['site_logo'] = file_url_transform_relative(file_create_url(theme_get_setting('logo.url')));
      break;
    
    case 'footer':
      // Pass Navbar style setting path to template
      $variables['footer_style'] = theme_get_setting('footer_style');
      break;
  }

}

/**
 * Implements hook_preprocess_block().
 */
function material_base_preprocess_block(&$variables) {

  if (isset($variables['elements']['content']['#block_content'])) {
    // Pass block type to template.
    $variables['block_bundle'] = $variables['elements']['content']['#block_content']->bundle();

    // Pass block object shortcut to template.
    $variables['block_content'] = $variables['elements']['content']['#block_content'];
  }

  // Pass block config data to content so this can be used in menu element
  if (isset($variables['elements']['#id'])) {
    $block = Block::load($variables['elements']['#id']);
    $region = $block->getRegion();
    $variables['content']['#attributes']['region'] = $region;
    $settings = $block->get('settings');
    if (isset($settings['depth'])) {
      $variables['content']['#attributes']['menu_depth'] = $settings['depth'];
    }
  }

}

/**
 * Implements hook_preprocess_menu().
 */
function material_base_preprocess_menu(&$variables) {

  // Pass mene depth to template
  if (isset($variables['attributes']['menu_depth'])) {
    $variables['menu_depth'] = $variables['attributes']['menu_depth'];
  }

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function material_base_theme_suggestions_page_alter(&$suggestions, &$variables) {

  $request = \Drupal::routeMatch()->getRouteObject();

  // Suggestion for page manager.
  // Source https://drupal.stackexchange.com/questions/211145/page-manager-panels-and-theme-suggestions
  if ($request->getDefault('_entity_view') === 'page_manager_page_variant') {
    $page_name = $request->getDefault('page_manager_page');
    $page_variant = $request->getDefault('page_manager_page_variant');
    $suggestions[] = 'page__page_manager';
    $suggestions[] = 'page__page_manager__' . $page_name;
    $suggestions[] = 'page__page_manager__' . $page_name . '__' . $page_variant;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function material_base_theme_suggestions_block_alter(array &$suggestions, array $variables) {

  $content = $variables['elements']['content'];

  if (isset($content['#block_content']) and $content['#block_content'] instanceof BlockContentInterface) {
    // Block title suggetion, default do not work in page manager blocks.
    $block_description = preg_replace('/\W+/','_',strtolower($content['#block_content']->label()));
    $suggestions[] = 'block__' . $block_description;
  }

  // View mode suggestion for custom blocks.
  if (isset($variables['elements']['#configuration']['view_mode'])) {
    $view_mode = $variables['elements']['#configuration']['view_mode'];
    $suggestions[] = 'block__' . $view_mode;
  }
  else {
    $view_mode = NULL;
  }

  // Region suggestions.
  if (isset($variables['elements']['#id'])) {
    if ($block = Block::load($variables["elements"]["#id"])) {
      $region = $block->getRegion();
      $suggestions[] = 'block__' . $region;
      $suggestions[] = 'block__' . $region . '__' . $variables['elements']['#base_plugin_id'];
      $suggestions[] = 'block__' . $region . '__' . $variables['elements']['#id'];
      $suggestions[] = 'block__' . $region . '__' . $variables['elements']['#base_plugin_id'] . '__' . $variables['elements']['#id'];
    }
  }

  // Custom Blocks suggestions (Bundles and view mode).
  if ($variables['elements']['#base_plugin_id'] === 'block_content'
    && isset($variables['elements']['content']['#block_content'])) {
    // Bundle type.
    $bundle = $variables['elements']['content']['#block_content']->bundle();
    $suggestions[] = 'block__' . $region . '__' . $bundle;
    if ($view_mode = $variables['elements']['content']['#view_mode']) {
      $suggestions[] = 'block__' . $region . '__' . $bundle . '__' . $view_mode;
      $suggestions[] = 'block__' . $bundle . '__' . $view_mode;
    }
    $suggestions[] = 'block__' . $bundle;
  }

}

/**
 * Implements hook_form_alter().
 */
function material_base_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $form['actions']['submit']['#attributes']['class'][] = 'mdc-button--raised';

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function material_base_theme_suggestions_menu_alter(&$suggestions, array $variables) {

  // Provide region based menu suggestions.
  if (isset($variables['attributes']['region'])) {
    $suggestions[] = 'menu__' . $variables['attributes']['region'];
    $suggestions[] = 'menu__' . str_replace('-', '_', $variables['menu_name']) . '__' . $variables['attributes']['region'];
  }

}
