{#
/**
 * @file
 * Default theme implementation for a form element.
 *
 * Available variables:
 * - attributes: HTML attributes for the containing element.
 * - errors: (optional) Any errors for this form element, may not be set.
 * - prefix: (optional) The form element prefix, may not be set.
 * - suffix: (optional) The form element suffix, may not be set.
 * - required: The required marker, or empty if the associated form element is
 *   not required.
 * - type: The type of the element.
 * - name: The name of the element.
 * - label: A rendered label element.
 * - label_display: Label display setting. It can have these values:
 *   - before: The label is output before the element. This is the default.
 *     The label includes the #title and the required marker, if #required.
 *   - after: The label is output after the element. For example, this is used
 *     for radio and checkbox #type elements. If the #title is empty but the
 *     field is #required, the label will contain only the required marker.
 *   - invisible: Labels are critical for screen readers to enable them to
 *     properly navigate through forms but can be visually distracting. This
 *     property hides the label for everyone except screen readers.
 *   - attribute: Set the title attribute on the element to create a tooltip but
 *     output no label element. This is supported only for checkboxes and radios
 *     in \Drupal\Core\Render\Element\CompositeFormElementTrait::preRenderCompositeFormElement().
 *     It is used where a visual label is not needed, such as a table of
 *     checkboxes where the row and column provide the context. The tooltip will
 *     include the title and required marker.
 * - description: (optional) A list of description properties containing:
 *    - content: A description of the form element, may not be set.
 *    - attributes: (optional) A list of HTML attributes to apply to the
 *      description content wrapper. Will only be set when description is set.
 * - description_display: Description display setting. It can have these values:
 *   - before: The description is output before the element.
 *   - after: The description is output after the element. This is the default
 *     value.
 *   - invisible: The description is output after the element, hidden visually
 *     but available to screen readers.
 * - disabled: True if the element is disabled.
 * - title_display: Title display setting.
 *
 * @see template_preprocess_form_element()
 *
 * @ingroup themeable
 */
#}
{%
  set outlined = false
%}
{%
  set full_width = false
%}
{%
  set disabled = false
%}
{%
  set classes = [
  'js-form-item',
  'form-item',
  'js-form-type-' ~ type|clean_class,
  'form-item-' ~ name|clean_class,
  'js-form-item-' ~ name|clean_class,
  title_display not in ['after', 'before'] ? 'form-no-label',
  disabled == 'disabled' ? 'form-disabled',
  errors ? 'form-item--error',
]
%}
{%
  set description_classes = [
  'description',
  description_display == 'invisible' ? 'visually-hidden',
]
%}
{%
 set mdc_attributes = create_attribute()
%}
{%
  set mdc_classes = [
    'mdc-text-field',
    outlined ? 'mdc-text-field--outlined',
    full_width ? 'mdc-text-field--fullwidth',
    disabled ? 'mdc-text-field--disabled',
    label_display != 'invisible' ? 'mdc-text-field--no-label'
  ]
%}
<div{{ attributes.addClass(classes) }}>

  {# TODO: Form errors #}

  <label{{ mdc_attributes.addClass(mdc_classes) }}>
    <div class="mdc-text-field__ripple"></div>

    {# TODO: Implement support of prefix #}

    {# TODO: Attributes must check if labels / description exist #}
    <input{{ input_attributes
        .setAttribute('aria-labelledby', input_attributes.id ~ '-label')
        .setAttribute('aria-controls', input_attributes.id ~ '-helper')
        .setAttribute('aria-describedby', input_attributes.id ~ '-helper')
        .addClass('mdc-text-field__input')
    }}>

    {# TODO: Implement support of suffix #}

    {% if outlined %}
    <div class="mdc-notched-outline">
      <div class="mdc-notched-outline__leading"></div>
      <div class="mdc-notched-outline__notch">
        {% if label_display != 'invisible' %}
          <span class="mdc-floating-label" id="{{ input_attributes.id ~ '-label' }}">{{ label['#title'] }}</span>
        {% endif %}
      </div>
      <div class="mdc-notched-outline__trailing"></div>
    </div>

    {# TODO: By default Drupal shows invisible label but hides it in css #}
    {% elseif label_display != 'invisible' %}
      <span class="mdc-floating-label" id="{{ input_attributes.id ~ '-label' }}">{{ label['#title'] }}</span>
    {% endif %}

    <div class="mdc-line-ripple"></div>
  </label>

  {# TODO: By default Drupal shows invisible description but hides it in css #}
  {% if description_display != 'invisible' and description.content %}
    <div class="mdc-text-field-helper-line">
      {# TODO: Make use of description.attributes && description_classes #}
      <div class="mdc-text-field-helper-text" id="{{ input_attributes.id ~ '-helper' }}" aria-hidden="true">
        {{ description.content }}
      </div>
    </div>
  {% endif %}

</div>
