{#
/**
 * @file
 * Theme override for status messages.
 *
 * Displays status, error, and warning messages, grouped by type.
 *
 * An invisible heading identifies the messages for assistive technology.
 * Sighted users see a colored box. See http://www.w3.org/TR/WCAG-TECHS/H69.html
 * for info.
 *
 * Add an ARIA label to the contentinfo area so that assistive technology
 * user agents will better describe this landmark.
 *
 * Available variables:
 * - message_list: List of messages to be displayed, grouped by type.
 * - status_headings: List of all status types.
 * - attributes: HTML attributes for the element, including:
 *   - class: HTML classes.
 */
#}
<div data-drupal-messages>
  {% if message_list is not empty %}
    <div class="messages__group">
      {% for type, messages in message_list %}

        {% set classes = [
            'messages',
            'messages--' ~ type,
            'mdc-snackbar',
        ] %}

        <div role="{{ type == 'error' ? 'alert' : 'contentinfo' }}" aria-label="{{ status_headings[type] }}"{{ attributes.addClass(classes).setAttribute('data-mdc-auto-init', 'MDCSnackbar')|without('role', 'aria-label') }}>
          <div class="mdc-snackbar__surface">
            <div class="mdc-snackbar__label" role="status" aria-live="polite">
              {% if messages|length > 1 %}
                <ul class="messages__list">
                  {% for message in messages %}
                    <li class="messages__item">{{ message }}</li>
                  {% endfor %}
                </ul>
              {% else %}
                {{ messages|first }}
              {% endif %}
            </div>
            <div class="mdc-snackbar__actions">
              {% include "@material_base_mdc/components/02_molecules/icon-button.twig" with {
                data: {
                  icon: {
                    data: {
                      value: 'close',
                    },
                    settings: {
                      type: 'svg-sprite',
                    },
                  },
                },
                settings: {
                  classes: ['mdc-snackbar__dismiss'],
                },
              } %}
            </div>
          </div>
        </div>

        {# Remove type specific classes. #}
        {% set attributes = attributes.removeClass(classes) %}

      {% endfor %}
    </div>
  {% endif %}
</div> 
